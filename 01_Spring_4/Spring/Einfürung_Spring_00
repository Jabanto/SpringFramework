Einfürung_Spring_00


#Einführung in das Spring Framework 


Auf den folgenden SeTutorial-Serie sind kleine einfache Beispiele als Einführung in das Spring Framework dargestellt.

Das Spring Framework ist ein Open Source Java Framework, welches einfache Java Objekte, sogenannte Plain-Old-Java-Objects (POJO),
als Spring Beans verwaltet. 
Dabei stellt das Spring Framework einen Inversion of Control (IoC) Container zu Verfügung, der per Dependency Injection (DI) abhängige Spring Beans miteinander verknüpft und konfiguriert. Durch diese Technik können Objektnetze aufgebaut werden.

Die wesentlichen Funktionen des Spring Frameworks sind …

    Plain-Old-Java-Objects (POJO) basierendes Programmiermodell.
    Verknüpfungen durch Dependency Injection (DI) über den Inversion-of-Control Container (IoC).
    Querschnittthemen werden durch Aspect oriented Programming (AOP) bereitgestellt.


Inhaltsverzeichnis

    1.Spring Framework Projekte
    2.Requirements
    3.Beiträge dieser Serie
    4.Literaturempfehlungen



#Die Spring Framework Projekte (Spring IO Platform)

Eine unvollständige Liste von zusätzlichen Themen bzw. Technologien, die vom Spring Framework (Spring IO Platform) unterstützt werden 

Spring Beans und Spring Core
Spring AOP und SPring Aspects
Spring Expresion (Language)
Spring Context und Spring Context Support
Spring TX(Transactions)
Spring JDBC
Spring ORM (Object-Relational-Mapping)
Spring OXM (Object-XML Mapping)
Spring LDAP
Spring Messasing, Spring JMS (Java Message Service) und Spring AMQP (Advanced Messade Queing Protocol)
Spring Web, Spring WebSocket und Spring MVC (Model View Controller)
Spring Web Flow
Spring Web Services
Spring Test
Spring Boot
Spring Initializr
Spring Data
Spring Security
Spring Batch
Spring Integration
Spring Social
Spring IDE (Integrated Development Environment)


#Informationen zur Implementierung bzw. zu den Requirements

Alle Beispiele wurden mit folgenden Frameworks bzw. Werkzeugen erstellt:
Spring Framework
Intellij IDE
Open JDK
Apache Tomcat als Websserver
Ubuntu
Git bei Bitbucket oder GitHub



Die genauen Versionen bitte der  pom.xml der einzelnen Projekte entnehmen.

Alle alten oder standard Eclipse/Intellji Projekte haben folgende Verzeichnisstruktur (Source-Folder):

    src/java für den produktiven Java Sourcecode
    src/test für den Sourcecode der Testfälle
    src/web für die Ressourcen der Webanwendung (Bilder, Javascript, JSP, HTML, usw.)

Alle neueren Eclipse/Intellji Projekte haben folgende Verzeichnisstruktur (Source-Folder), die der Vorgabe von Apache Maven entspricht:

    src/main/java für den produktiven Java Sourcecode
    src/main/test für den Sourcecode der Testfälle
    src/main/resources/templates für die dynamischen Ressourcen der Webanwendung (HTML5)
    src/main/resources/static für die statischen Ressourcen der Webanwendung (Bilder, JavaScript, CSS)


Die Beiträge dieser Serie, dass wir in diese Serie anschauen werden.

01 Spring an einem einfachem Beispiel
In diesem Beitrag werden die Grundlagen von Spring Framework wie die Definition von Spring Bean per XML Konfiguration und Annotationen, automatisches Dependency Injection (Autowired) und der Component scan vorgestellt.

02 Spring mit AOP
In diesem Beitrag wird auf die aspektorientierte Programmierung unter dem Spring Framework mit Advices und Join Points eingegangen. Dazu kommt AspectJ und CGLIB zum Einsatz.

03 Spring mit JPA und Hibernate
In diesem Beitrag werden die abstrakten und generischen Datenzugriffsobjekte für das Spring Framework und der Umgang mit JPA Entitäten gezeigt.

04 Spring mit einer einfachen Webanwendung
In diesem Beitrag wird das Spring MVC mit Masken (Views) und Steuerung (Controller) vorgestellt. Als View Technologien kommt JSP zum Einsatz.

05 Spring mit einer Webanwendung mit JPA und Validierung
In diesem Beitrag werden die Technologien der beiden vorherigen Beiträgen kombiniert und um die Validierung nach JSR 303 erweitert.

06 Spring Security mit einer Webanwendung
In diesem Beitrag wird die Webanwendung aus dem vorherigen Beitrag abgesichert. Dazu wird mit Spring Security eine Autorisierung (Berechtigung) von Services per Annotation vorgeführt. Die Authentifizierung (Anmeldung) per Kommandozeile und per Webseite (Login-Formular) durchgeführt.

07 Spring mit RESTful Webservice
In diesem Beitrag wird das Erstellen und Testen eines RESTful Webservices beschrieben. Dazu wird ein XML-Schemas mit JAXB definiert und das Serialisieren von Entitäten nach JSON und XML erläutert.

08 Spring und Stored Procedures mit User-defined Types
In diesem Beitrag wird mit Spring JDBC auf eine Stored Procedures zugegriffen. Dabei werden benutzerdefinierte strukturierte Datentypen, sogenannte User-definied Types (UDT), verwendet. Diese komplexen SQL-Typen sind mit der Version 2.1 zum JDBC Standard hinzugekommen.


Die zugehörigen Beispiele (Erweiterung):

Stored Procedure mit User-defined Types unter PostgreSQL
In diesem Beitrag möchte ich zeigen, wie eine Stored Procedure mit User-defined Types (UDT) in einer PostgreSQL Datenbank programmiert wird. Im übergeordneten Beitrag Spring und Stored Procedure mit User-defined Types wird das Aufrufen dieser Stored Procedure aus Java heraus gezeigt.

Stored Procedure mit User-defined Types unter Oracle
In diesem Beitrag möchte ich zeigen, wie eine Stored Procedure mit User-defined Types (UDT) in einer Oracle Database programmiert wird. Im übergeordneten Beitrag Spring und Stored Procedure mit User-defined Types wird das Aufrufen dieser Stored Procedure aus Java heraus gezeigt.

Spring Boot Webanwendung: Die ersten Schritte (Tutorial)
In diesem Beitrag zeige ich ein Beispiel mit einer Spring Boot Webanwendung. Diese Webanwendung ist eine einfache und unvollständige Wertpapierverwaltung mit Datenbankzugriffen (JPA) auf Basis von Spring Boot.


Die Literaturempfehlungen

    Referenzdokumentation Spring Framework
    Spring 3: Framework für die Java-Entwicklung (*)
    Pro Spring Boot (*)
    Spring Boot in Action (*)
    Domain-Driven Design: Tackling Complexity in the Heart of Software (*) von Eric J. Evans
    Core J2ee Patterns: Best Practices and Design Strategies (*)




