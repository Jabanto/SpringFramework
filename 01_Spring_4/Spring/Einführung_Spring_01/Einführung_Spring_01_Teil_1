Einführung_Spring_01_Teil_1

Dieser Beitrag die ersteil erste Teil dieser Tutorial- Serie über die Einführung in das Spring Framework und stellt das Spring Framework an einem kleinen einfachem Beispiel vor.

Die Struktur des Projektes

Die verwendeten Frameworks und Werkzeuge sind hier beschrieben.

Alle Beispiele wurden mit folgenden Frameworks bzw. Werkzeugen erstellt:

    Spring Framework
    Eclipse IDE
    OpenJDK
    Apache Tomcat
    Ubuntu
    Git bei GitHub
    Die genauen Versionen bitte der  pom.xml der einzelnen Projekte entnehmen.

Alle alten oder standard Eclipse/Intellji Projekte haben folgende Verzeichnisstruktur (Source-Folder):

    src/java für den produktiven Java Sourcecode
    src/test für den Sourcecode der Testfälle
    src/web für die Ressourcen der Webanwendung (Bilder, Javascript, JSP, HTML, usw.)

Alle neueren Eclipse/Intellji Projekte haben folgende Verzeichnisstruktur (Source-Folder), die der Vorgabe von Apache Maven entspricht:

    src/main/java für den produktiven Java Sourcecode
    src/main/test für den Sourcecode der Testfälle
    src/main/resources/templates für die dynamischen Ressourcen der Webanwendung (HTML5)
    src/main/resources/static für die statischen Ressourcen der Webanwendung (Bilder, JavaScript, CSS)

    
Dieses Beispiel ist eine Konsolenanwendung, die den Service eines Taschenrechners aufruft.
In diesem Beispiel werden die folgenden Technologien des Spring Frameworks vorgestellt:

    Die Definition einer Spring Bean mit einem Interface über die XML Konfiguration des Spring Frameworks.
    Die Verwendung von Spring Framework Utilities zur Validierung von Aufrufparametern.
    Die Erstellung eines JUnit-Tests mit der Verwendung von Java Hamcrest.
    Die Trennung der Test-Implementierung von der Produktiven-Implementierung.
    Die automatisches Dependency Injection (Autowired) des Taschenrechners.
    Die Verwendung von Logging.
    Das Definieren von Spring Beans mit Annotationen und das Auffinden der Spring Beans mit einem Component scan.
    Das Starten einer Konsolenanwendung.

Im folgendem Bild ist die Projektstruktur dargestellt.

Im folgendem Bild sind die benötigten Bibliotheken dargestellt. Das Maven Plugin wird hier nur für das Auflösen der Abhängigkeiten (Dependency) und das Downloaden der benötigten Bibliotheken verwendet.


Update

Das Maven Skript wurde vervollständigt und kann auch zum Builden ( $ mvn clean package) der Anwendung verwendet werden. Mit $ mvn eclipse:clean eclipse:eclipse werden die Konfigurationsdateien für Eclipse neu erstellt – sie sind aber auch noch im Repository. Die Anwendung kann mit $ mvn exec:java ausgeführt werden.


Die Literaturempfehlungen für dieses Beispiel

    Referenzdokumentation des Spring Framework’s
    Spring 3: Framework für die Java-Entwicklung (*)
